#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –º–Ω–æ–≥–æ—ç—Ç–∞–ø–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
"""
import requests
import json

BASE_URL = "http://localhost:8000"

def test_new_registration_flow():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –º–Ω–æ–≥–æ—ç—Ç–∞–ø–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
    print("=" * 60)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    phone = "+79999999999"
    username = "test_user"
    email = "test@example.com"
    first_name = "Test"
    last_name = "User"
    password = "testpassword123"
    
    # –®–∞–≥ 1: –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    print("\nüì± –®–∞–≥ 1: –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
    response = requests.post(f"{BASE_URL}/api/auth/send-code/", json={
        "phone": phone,
        "is_reset": False
    })
    
    print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
    print(f"–û—Ç–≤–µ—Ç: {json.dumps(response.json(), indent=2, ensure_ascii=False)}")
    
    if response.status_code != 200:
        print("‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —à–∞–≥–µ 1")
        return
    
    # –®–∞–≥ 2: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (—Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ –ø–∞—Ä–æ–ª—è)
    print("\nüë§ –®–∞–≥ 2: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
    response = requests.post(f"{BASE_URL}/api/auth/complete-registration/", json={
        "phone": phone,
        "code": "123456",  # –í debug —Ä–µ–∂–∏–º–µ –≤—Å–µ–≥–¥–∞ 123456
        "username": username,
        "email": email,
        "first_name": first_name,
        "last_name": last_name
    })
    
    print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
    print(f"–û—Ç–≤–µ—Ç: {json.dumps(response.json(), indent=2, ensure_ascii=False)}")
    
    if response.status_code != 201:
        print("‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —à–∞–≥–µ 2")
        return
    
    user_data = response.json()["user"]
    print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω —Å should_update_password: {user_data['should_update_password']}")
    
    # –®–∞–≥ 3: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä–æ–ª—è
    print("\nüîê –®–∞–≥ 3: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä–æ–ª—è")
    response = requests.post(f"{BASE_URL}/api/auth/set-password/", json={
        "phone": phone,
        "password": password,
        "password_confirm": password
    })
    
    print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
    print(f"–û—Ç–≤–µ—Ç: {json.dumps(response.json(), indent=2, ensure_ascii=False)}")
    
    if response.status_code != 200:
        print("‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —à–∞–≥–µ 3")
        return
    
    token = response.json()["token"]
    user_data = response.json()["user"]
    print(f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! should_update_password: {user_data['should_update_password']}")
    print(f"üîë –¢–æ–∫–µ–Ω: {token}")
    
    # –®–∞–≥ 4: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥–∞
    print("\nüö™ –®–∞–≥ 4: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥–∞")
    response = requests.post(f"{BASE_URL}/api/auth/login/", json={
        "phone": phone,
        "password": password
    })
    
    print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
    print(f"–û—Ç–≤–µ—Ç: {json.dumps(response.json(), indent=2, ensure_ascii=False)}")
    
    if response.status_code == 200:
        print("‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞")
    
    return token


def test_password_reset_flow():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è"""
    print("\n\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è")
    print("=" * 60)
    
    phone = "+79999999999"
    new_password = "newpassword123"
    
    # –®–∞–≥ 1: –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è
    print("\nüì± –®–∞–≥ 1: –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è")
    response = requests.post(f"{BASE_URL}/api/auth/reset-password/", json={
        "phone": phone
    })
    
    print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
    print(f"–û—Ç–≤–µ—Ç: {json.dumps(response.json(), indent=2, ensure_ascii=False)}")
    
    if response.status_code != 200:
        print("‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —à–∞–≥–µ 1 –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è")
        return
    
    # –®–∞–≥ 2: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è
    print("\nüîê –®–∞–≥ 2: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è")
    response = requests.post(f"{BASE_URL}/api/auth/set-new-password/", json={
        "phone": phone,
        "password": new_password,
        "password_confirm": new_password,
        "code": "123456"  # –í debug —Ä–µ–∂–∏–º–µ –≤—Å–µ–≥–¥–∞ 123456
    })
    
    print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
    print(f"–û—Ç–≤–µ—Ç: {json.dumps(response.json(), indent=2, ensure_ascii=False)}")
    
    if response.status_code == 200:
        print("‚úÖ –ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!")
        token = response.json()["token"]
        return token
    else:
        print("‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è")
        return None


def test_protection_against_spam():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∑–∞—â–∏—Ç—É –æ—Ç —Å–ø–∞–º–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    print("\n\nüõ°Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—â–∏—Ç—ã –æ—Ç —Å–ø–∞–º–∞")
    print("=" * 60)
    
    phone = "+79999999999"
    
    # –ü–æ–ø—ã—Ç–∫–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –Ω–æ–º–µ—Ä –±–µ–∑ is_reset
    print("\nüö´ –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –±–µ–∑ is_reset")
    response = requests.post(f"{BASE_URL}/api/auth/send-code/", json={
        "phone": phone,
        "is_reset": False
    })
    
    print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
    print(f"–û—Ç–≤–µ—Ç: {json.dumps(response.json(), indent=2, ensure_ascii=False)}")
    
    if response.status_code == 400:
        print("‚úÖ –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
    else:
        print("‚ùå –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")


if __name__ == "__main__":
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ–≤—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        token = test_new_registration_flow()
        
        if token:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è
            test_password_reset_flow()
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞—â–∏—Ç—É –æ—Ç —Å–ø–∞–º–∞
            test_protection_against_spam()
        
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
        
    except requests.exceptions.ConnectionError:
        print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ localhost:8000")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
